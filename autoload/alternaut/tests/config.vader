Before:
  let alternaut#private#interceptors = {}
  let alternaut#conventions = {}
  let alternaut#interceptors = {}

  let conventions = {}
  let conventions['file_naming_conventions'] = []
  let conventions['directory_naming_conventions'] = []
  let conventions['file_extensions'] = []

Execute (returns null if the file type has not been defined):
  AssertEqual v:null, alternaut#config#load_conventions('ft')

Execute (returns the file config if defined):
  let alternaut#conventions['ft'] = conventions

  AssertEqual conventions, alternaut#config#load_conventions('ft')

Execute (survives if no conventions are defined):
  unlet alternaut#conventions

  AssertEqual v:null, alternaut#config#load_conventions('ft')

Execute (fails to load the config if missing a field):
  let alternaut#conventions['ft'] = copy(conventions)
  unlet alternaut#conventions['ft']['file_naming_conventions']
  silent AssertEqual v:null, alternaut#config#load_conventions('ft')

  let alternaut#conventions['ft'] = copy(conventions)
  unlet alternaut#conventions['ft']['directory_naming_conventions']
  silent AssertEqual v:null, alternaut#config#load_conventions('ft')

  let alternaut#conventions['ft'] = copy(conventions)
  unlet alternaut#conventions['ft']['file_extensions']
  silent AssertEqual v:null, alternaut#config#load_conventions('ft')

Execute (returns an empty interceptor array when none are defined):
  unlet alternaut#interceptors

  AssertEqual [], alternaut#config#load_interceptors('ft')

Execute (returns an empty array if any interceptor is invalid):
  let alternaut#interceptors['ft'] = []
  call add(alternaut#interceptors['ft'], 'invalid value')

  silent AssertEqual [], alternaut#config#load_interceptors('ft')

Execute (returns the legacy interceptor config if the new form is omitted):
  unlet alternaut#interceptors
  call alternaut#AddInterceptor('ft', { path, def -> v:null })

  AssertEqual 1, len(alternaut#config#load_interceptors('ft'))
